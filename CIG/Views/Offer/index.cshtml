@{
    ViewData["Title"] = "Crea Offerta PDF";
}
<link rel="stylesheet" href="~/css/offer.css" />
<hr />  

<div id="stepsContainer">
    <!-- STEP 1: Scelta Auto -->
    <div id="step1" class="step-content active">
        <div class="car-selection-container">
            <div class="dropdowns">
                <select id="marca"></select>
                <select id="modello"></select>
                <select id="versione"></select>
                <select id="variante"></select>
            </div>
            <div class="car-preview">
                <img id="anteprimaAuto" src="" alt="Anteprima Auto">
                <div id="imagePlaceholder">Seleziona una variante per visualizzare l'anteprima</div>
                <div id="loader" style="display:none;" class="loader"></div>
            </div>
            <!-- NUOVI CAMPI: Descrizione Versione e Note -->
            <div class="additional-car-info" style="margin-top: 20px;">
                <div class="form-group">
                    <label for="descrizioneVersione">Descrizione versione:</label>
                    <input type="text" id="descrizioneVersione" placeholder="Inserisci descrizione versione" required>
                </div>
       
            </div>
            <div class="form-group">
                <label for="noteAuto">Note:</label>
                <textarea id="noteAuto" placeholder="Inserisci eventuali note sull'auto"></textarea>
            </div>
        </div>
    </div>

    <!-- STEP 2: Scelta Cliente (NUOVO STEP) -->
    <div id="step2" class="step-content" style="display:none;">
        <h2>Seleziona Cliente</h2>
        <div style="margin-top:20px;">
            <input type="text" id="customerInput" placeholder="Cerca cliente..." autocomplete="off" />
            <ul id="customerResults" style="border:1px solid #ccc;padding:5px;max-height:200px;overflow:auto;display:none;"></ul>
        </div>
        <div style="margin-top:30px;">
            <table id="customerTable" class="table">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Cognome / Ragione Sociale</th>
                        <th>Email</th>
                        <th>Telefono</th>
                    </tr>
                </thead>
                <tbody id="customerTableBody">
                    <!-- i clienti verranno inseriti qui da JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- STEP 3: Scelta servizi -->
    <div id="step3" class="step-content" style="display:none;">
        <div id="servicesSection">
            <h2>Scegli i servizi per l'offerta:</h2>
            <div id="servicesList">Caricamento servizi...</div>
        </div>
    </div>

    <!-- STEP 4: Dati Economici -->
    <div id="step4" class="step-content" style="display:none;">
        <h2>Dati Economici Offerta</h2>
        <div class="economic-data-form">
            <div class="form-group">
                <label for="durataMesi">Durata (mesi):</label>
                <input type="number" id="durataMesi" placeholder="es. 36">
            </div>
            <div class="form-group">
                <label for="kmTotali">Km totali previsti:</label>
                <input type="number" id="kmTotali" placeholder="es. 60000">
            </div>
            <div class="form-group">
                <label for="anticipo">Anticipo (€):</label>
                <input type="number" id="anticipo" placeholder="es. 1000">
            </div>
            <div class="form-group">
                <label for="canone">Canone Mensile (€):</label>
                <input type="number" id="canone" placeholder="es. 350">
            </div>
        </div>
    </div>

    <!-- STEP 5: Riepilogo e Conferma -->
    <div id="step5" class="step-content" style="display:none;">
        <h2>Riepilogo Offerta</h2>
        <div id="riepilogoOfferta" class="summary-container">
            <!-- Riepilogo generato via JS -->
        </div>
        <button id="generatePdfBtn" style="margin-top:20px;">📄 Genera PDF</button>
    </div>
</div>

<!-- Bottoni navigazione STEP -->
<div class="navigation-buttons">
    <button id="backBtn" style="display:none;">← Indietro</button>
    <button id="nextStepBtn">Avanti →</button>
    <button id="generatePdfBtn" style="display:none;">📄 Genera PDF</button>
</div>


@section Scripts {

    <script>

        let adminInfo = null;
        let marcaDropdown, modelloDropdown, versioneDropdown, varianteDropdown, anteprimaAuto, loader, imagePlaceholder, carMainImageUrl, descrizioneVersione, noteAuto;
        let carImagesUrls = [];



        document.addEventListener("DOMContentLoaded", async () => {
            marcaDropdown = document.getElementById("marca");
            modelloDropdown = document.getElementById("modello");
            versioneDropdown = document.getElementById("versione");
            varianteDropdown = document.getElementById("variante");
            anteprimaAuto = document.getElementById("anteprimaAuto");
            loader = document.getElementById("loader");
            imagePlaceholder = document.getElementById("imagePlaceholder");
            carMainImageUrl = "";
            descrizioneVersione = document.getElementById('descrizioneVersione');
            noteAuto = document.getElementById('noteAuto');

            adminInfo = await fetchAdminInfo();

            // Carica inizialmente le marche
            fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=it-azureautomotive`, marcaDropdown, "make");

            marcaDropdown.addEventListener("change", () => {
                modelloDropdown.innerHTML = '';
                versioneDropdown.innerHTML = '';
                varianteDropdown.innerHTML = '';
                anteprimaAuto.src = '';

                if (marcaDropdown.value) {
                    fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=it-azureautomotive&make=${marcaDropdown.value}`, modelloDropdown, "modelFamily");
                }
            });

            modelloDropdown.addEventListener("change", () => {
                versioneDropdown.innerHTML = '';
                varianteDropdown.innerHTML = '';
                anteprimaAuto.src = '';

                if (modelloDropdown.value) {
                    fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=it-azureautomotive&make=${marcaDropdown.value}&modelFamily=${modelloDropdown.value}`, versioneDropdown, "modelRange");
                }
            });

            versioneDropdown.addEventListener("change", () => {
                varianteDropdown.innerHTML = '';
                anteprimaAuto.src = '';

                if (versioneDropdown.value) {
                    fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=it-azureautomotive&make=${marcaDropdown.value}&modelFamily=${modelloDropdown.value}&modelRange=${versioneDropdown.value}`, varianteDropdown, "modelVariant");
                }
            });

            varianteDropdown.addEventListener("change", () => {
            loader.style.display = "block";
            anteprimaAuto.style.display = "none";
            imagePlaceholder.style.display = "none";

            if (varianteDropdown.value) {
                const angles = [203, 29, 17, 9, 21, 13];
                const colors = ["White", "Grey", "Red", "Yellow", "Azure"];

                // Funzione helper per scegliere un colore casuale
                function getRandomColor() {
                    return colors[Math.floor(Math.random() * colors.length)];
                }

                carImagesUrls = angles.map(angle => {  // ⚠️ Qui era l'errore (no const)
                    const color = getRandomColor();
                    return {
                        url: `https://cdn.imagin.studio/getImage?customer=it-azureautomotive&make=${marcaDropdown.value}&modelFamily=${modelloDropdown.value}&modelRange=${versioneDropdown.value}&modelVariant=${varianteDropdown.value}&angle=${angle}&paintDescription=${color}&zoomType=FullScreen&groundPlaneAdjustment=0&fileType=png&width=800`,
                        color: color,
                        angle: angle
                    };
                });

                anteprimaAuto.src = carImagesUrls[0].url;

                anteprimaAuto.onload = function() {
                    loader.style.display = "none";
                    anteprimaAuto.style.display = "block";
                    carMainImageUrl = carImagesUrls[0].url;
                };

                anteprimaAuto.onerror = function() {
                    loader.style.display = "none";
                    imagePlaceholder.textContent = "Anteprima non disponibile";
                    imagePlaceholder.style.display = "flex";
                };
            } else {
                loader.style.display = "none";
                imagePlaceholder.textContent = "Seleziona una variante per visualizzare l'anteprima";
                imagePlaceholder.style.display = "flex";
            }
        });

    });


        // Funzioni esterne dichiarate correttamente fuori dall'evento DOMContentLoaded
        async function fetchAdminInfo() {
            const token = new URLSearchParams(window.location.search).get('token');
            try {
                const res = await fetch('https://coreapi-production-ca29.up.railway.app/users/me', {
                    headers: { "Authorization": "Bearer " + token }
                });

                if (!res.ok) throw new Error('Errore caricamento dati Admin');

                const adminData = await res.json();

                return {
                    Id: adminData.id,
                    Email: adminData.email,
                    FirstName: adminData.nome,
                    LastName: adminData.cognome,
                    CompanyName: adminData.ragione_sociale,
                    VatNumber: adminData.partita_iva,
                    Address: adminData.indirizzo,
                    PostalCode: adminData.cap,
                    City: adminData.citta,
                    SDICode: adminData.codice_sdi,
                    MobilePhone: adminData.cellulare,
                    LogoUrl: adminData.logo_url
                };
            } catch(error){
                console.error(error);
                alert("Errore caricamento dati Admin.");
                return null;
            }
        }

        async function fetchDropdown(url, dropdown, keyName) {
            dropdown.innerHTML = '<option value="">Caricamento...</option>';
            dropdown.disabled = true;

            try {
                const response = await fetch(url);
                const data = await response.json();

                dropdown.innerHTML = `<option value="">Seleziona ${keyName}</option>`;

                let items = [];
                if (data.preselect && data.preselect.options && data.preselect.options[keyName]) {
                    items = data.preselect.options[keyName];
                } else if (data[keyName]) {
                    items = data[keyName];
                } else {
                    console.error("Struttura dati imprevista", data);
                    dropdown.innerHTML = `<option value="">Nessun dato disponibile</option>`;
                    return;
                }

                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item;
                    option.textContent = item.toUpperCase();
                    dropdown.appendChild(option);
                });

                dropdown.disabled = false;
            } catch (error) {
                console.error('Errore nel recupero dati:', error);
                dropdown.innerHTML = `<option value="">Errore caricamento</option>`;
            }
        }



        const customerInput = document.getElementById('customerInput');
        const customerResults = document.getElementById('customerResults');
        let selectedCustomer = {};

        customerInput.addEventListener('input', function () {
            const query = customerInput.value.trim();

            // Nascondi risultati se query troppo corta
            if (query.length < 3) {
                customerResults.style.display = 'none';
                customerResults.innerHTML = '';
                return;
            }

            const token = new URLSearchParams(window.location.search).get('token');

            fetch('https://coreapi-production-ca29.up.railway.app/customers/clienti', {
                headers: {
                    "Authorization": "Bearer " + token
                }
            })
            .then(res => res.json())
            .then(clienti => {
                // ✅ fondamentale pulire i risultati precedenti qui:
                customerResults.innerHTML = '';

                const filteredCustomers = clienti.filter(cliente =>
                    (cliente.nome && cliente.nome.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.cognome && cliente.cognome.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.ragione_sociale && cliente.ragione_sociale.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.email && cliente.email.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.telefono && cliente.telefono.includes(query))
                );

                // gestione caso nessun risultato
                if (filteredCustomers.length === 0) {
                    customerResults.innerHTML = '<li>Nessun risultato trovato</li>';
                } else {
                    filteredCustomers.forEach(cliente => {
                        const li = document.createElement('li');
                        const nomeCompleto = [cliente.nome, cliente.cognome].filter(Boolean).join(' ') || cliente.ragione_sociale;

                        li.textContent = `${nomeCompleto} (${cliente.email})`;

                        li.addEventListener('click', function () {
                            customerInput.value = nomeCompleto;
                            customerResults.style.display = 'none';
                            selectedCustomer = cliente;
                            document.getElementById('nextStepBtn').style.display = 'inline-block';
                        });

                        customerResults.appendChild(li);
                    });
                }

                customerResults.style.display = 'block';
            })
            .catch(error => {
                console.error('Errore:', error);
                customerResults.innerHTML = '<li>Errore durante la ricerca.</li>';
                customerResults.style.display = 'block';
            });
        });

            async function loadCustomersTable() {
            const token = new URLSearchParams(window.location.search).get('token');
            const customerTableBody = document.getElementById('customerTableBody');

            try {
                const response = await fetch('https://coreapi-production-ca29.up.railway.app/customers/clienti', {
                    headers: {
                        "Authorization": "Bearer " + token
                    }
                });

                const clienti = await response.json();

                // Pulisco la tabella prima di inserire nuovi dati
                customerTableBody.innerHTML = '';

                clienti.forEach(cliente => {
                    const tr = document.createElement('tr');

                    tr.innerHTML = `
                        <td>${cliente.nome || '-'}</td>
                        <td>${cliente.cognome || cliente.ragione_sociale || '-'}</td>
                        <td>${cliente.email || '-'}</td>
                        <td>${cliente.telefono || '-'}</td>
                    `;

                    // Evento click per selezionare il cliente
                            // Evento click per selezionare il cliente dalla tabella
                    tr.addEventListener('click', () => {
                        selectedCustomer = cliente;

                        // Uniforma il comportamento:
                        customerInput.value = `${cliente.nome || ''} ${cliente.cognome || cliente.ragione_sociale || ''}`.trim();

                        // Nasconde i risultati di ricerca (se aperti)
                        customerResults.style.display = 'none';

                        // Mostra bottone prossimo step
                        document.getElementById('nextStepBtn').style.display = 'inline-block';
                    });


                    customerTableBody.appendChild(tr);
                });

            } catch (error) {
                console.error('Errore nel caricamento clienti:', error);
                customerTableBody.innerHTML = '<tr><td colspan="4">Errore nel caricamento dei clienti.</td></tr>';
            }
        }

        // Chiama la funzione al caricamento della pagina:
        document.addEventListener("DOMContentLoaded", loadCustomersTable);



        let currentStep = 1;
        const totalSteps = 5;

        document.getElementById('nextStepBtn').addEventListener('click', () => {
            if (currentStep < totalSteps) goToStep(currentStep + 1);
        });

        document.getElementById('backBtn').addEventListener('click', () => {
            if (currentStep > 1) goToStep(currentStep - 1);
        });

                function goToStep(stepNumber) {
                const current = document.getElementById(`step${currentStep}`);
                current.classList.remove('active');
                currentStep = stepNumber;

                const next = document.getElementById(`step${currentStep}`);
                next.classList.add('active');

                // Gestione pulsanti navigazione
                document.getElementById('backBtn').style.display = currentStep > 1 ? 'inline-block' : 'none';

                const nextStepBtn = document.getElementById('nextStepBtn');
                const generatePdfBtn = document.getElementById('generatePdfBtn');

                if (currentStep === 5) {
                    nextStepBtn.style.display = 'none';
                    generatePdfBtn.style.display = 'inline-block';
                } else {
                    nextStepBtn.style.display = 'inline-block';
                    document.getElementById('generatePdfBtn').style.display = 'none';
                    nextStepBtn.textContent = `Avanti →`;
                }

                // Carica servizi solo nello STEP 3
                if (currentStep === 3) {
                    caricaServizi();
                }

                // Genera riepilogo solo nello STEP 5
                if (currentStep === 5) {
                    generaRiepilogo();
                }
            }

            function caricaServizi() { // 👈 mancava questa apertura!

            const token = new URLSearchParams(window.location.search).get("token");
            const servicesList = document.getElementById("servicesList");

            fetch('https://coreapi-production-ca29.up.railway.app/nlt/services', {
                headers: {
                    "Authorization": "Bearer " + token
                }
            })
            .then(res => res.json())
            .then(data => {
                servicesList.innerHTML = '';

                data.services.forEach(service => {
                    let html = `
                        <div class="service-item">
                            <strong>${service.name}</strong><br>
                            <small>${service.description}</small>
                    `;

                    if (service.conditions && service.conditions.options) {
                        html += '<div class="service-options">';
                        service.conditions.options.forEach((option, index) => {
                            html += `
                                <label style="margin-right:10px;">
                                    <input type="radio" name="option_${service.id}"
                                           value="${option}" ${index === 0 ? "checked" : ""}>
                                    ${option}
                                </label>
                            `;
                        });
                        html += '</div>';
                    }

                    html += '</div>';

                    const serviceItem = document.createElement('div');
                    serviceItem.innerHTML = html;
                    servicesList.appendChild(serviceItem);
                });

            })
            .catch(error => {
                servicesList.textContent = 'Errore caricamento servizi.';
                console.error('Errore:', error);
            });
        }
        


        function generaRiepilogo() {
            const riepilogo = document.getElementById('riepilogoOfferta');

            // Recupera dati selezionati
            const auto = {
                marca: marcaDropdown.value,
                modello: modelloDropdown.value,
                versione: versioneDropdown.value,
                variante: varianteDropdown.value
            };

            const cliente = document.getElementById('customerInput').value;

            // Servizi selezionati
            const serviziSelezionati = [];
            document.querySelectorAll('#servicesList input[type="checkbox"]:checked').forEach(checkbox => {
                const servizio = checkbox.nextElementSibling.textContent;
                const opzione = document.querySelector(`input[name="option_${checkbox.value}"]:checked`)?.value || 'Nessuna opzione';
                serviziSelezionati.push(`${servizio} (${opzione})`);
            });

            // Dati economici
            const durata = document.getElementById('durataMesi').value;
            const km = document.getElementById('kmTotali').value;
            const anticipo = document.getElementById('anticipo').value;
            const canone = document.getElementById('canone').value;

            riepilogo.innerHTML = `
                <h4>🚗 Auto selezionata</h4>
                <p>${auto.marca} ${auto.modello} ${auto.versione} ${auto.variante}</p>

                <h4>👤 Cliente</h4>
                <p>${cliente}</p>

                <h4>🛠️ Servizi selezionati</h4>
                <ul>${serviziSelezionati.map(s => `<li>${s}</li>`).join('')}</ul>

                <h4>💶 Dati economici</h4>
                <ul>
                    <li>Durata: ${durata} mesi</li>
                    <li>Km previsti: ${km}</li>
                    <li>Anticipo: € ${anticipo}</li>
                    <li>Canone: € ${canone}</li>
                </ul>
            `;
        }

        document.getElementById('generatePdfBtn').addEventListener('click', () => {
            const token = new URLSearchParams(window.location.search).get("token");

            if (!selectedCustomer || !carMainImageUrl || !adminInfo) {
                alert("Alcuni dati obbligatori mancano. Controlla la selezione cliente, auto e info admin.");
                return;
            }

            if (!carImagesUrls.length) {
                alert("CarImagesUrls è vuoto! Devi selezionare una variante prima di generare il PDF.");
                return;
            }

            const payload = {
                CustomerFirstName: selectedCustomer.nome || "",
                CustomerLastName: selectedCustomer.cognome || "",
                CustomerCompanyName: selectedCustomer.ragione_sociale || "",
                CustomerIcon: "icona_default.png",
                CarMainImageUrl: carMainImageUrl,
                CarThumbnailUrl: carMainImageUrl,
                AdminInfo: adminInfo,
                DealerInfo: null,
                Auto: {
                    Marca: marcaDropdown.value || "",
                    Modello: modelloDropdown.value || "",
                    Versione: versioneDropdown.value || "",
                    Variante: varianteDropdown.value || "",
                    DescrizioneVersione: descrizioneVersione.value || "",
                    Note: noteAuto.value || ""
                },
                CarImages: carImagesUrls,
                Servizi: Array.from(document.querySelectorAll('#servicesList input[type="checkbox"]:checked')).map(checkbox => ({
                    Id: checkbox.value,
                    Nome: checkbox.getAttribute('data-service-name'),
                    Opzione: document.querySelector(`input[name="option_${checkbox.value}"]:checked`)?.value || null
                })),
                DatiEconomici: {
                    Durata: parseInt(document.getElementById('durataMesi').value) || 0,
                    KmTotali: parseInt(document.getElementById('kmTotali').value) || 0,
                    Anticipo: parseFloat(document.getElementById('anticipo').value) || 0,
                    Canone: parseFloat(document.getElementById('canone').value) || 0
                }
            };

            console.log("Payload:", payload);

            fetch('/api/Pdf/GenerateOffer', {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + token
                },
                body: JSON.stringify(payload)
            })
            .then(res => res.blob())
            .then(blob => {
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = getUniqueFileName();
                document.body.appendChild(a);
                a.click();
                a.remove();
            })
            .catch(error => {
                console.error("Errore generazione PDF:", error);
            });
        });

            function getUniqueFileName(){
            const now = new Date();
            const dateTimeString = now.getFullYear().toString() +
                ('0' + (now.getMonth() + 1)).slice(-2) +
                ('0' + now.getDate()).slice(-2) + '_' +
                ('0' + now.getHours()).slice(-2) +
                ('0' + now.getMinutes()).slice(-2) +
                ('0' + now.getSeconds()).slice(-2);

            return `NLT_Offer_${dateTimeString}.pdf`;
            }
        
    </script>
}
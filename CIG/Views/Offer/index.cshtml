@{
    ViewData["Title"] = "Crea Offerta PDF";
}
<link rel="stylesheet" href="~/css/offer.css" />
<hr />  

<div id="stepsContainer">
    <!-- STEP 1: Scelta Auto -->
    <div id="step1" class="step-content active">
        <div class="car-selection-container">
            <div class="dropdowns">
                <select id="marca"></select>
                <select id="modello"></select>
                <select id="versione"></select>
                <select id="variante"></select>
            </div>
            <div class="car-preview">
                <img id="anteprimaAuto" src="" alt="Anteprima Auto">
                <div id="imagePlaceholder">Seleziona una variante per visualizzare l'anteprima</div>
                <div id="loader" style="display:none;" class="loader"></div>
            </div>
            <!-- NUOVI CAMPI: Descrizione Versione e Note -->
            <div class="additional-car-info" style="margin-top: 20px;">
                <div class="form-group">
                    <label for="descrizioneVersione">Descrizione versione:</label>
                    <input type="text" id="descrizioneVersione" placeholder="Inserisci descrizione versione" required>
                </div>
       
            </div>
            <div class="form-group">
                <label for="noteAuto">Note:</label>
                <textarea id="noteAuto" placeholder="Inserisci eventuali note sull'auto"></textarea>
            </div>
        </div>
    </div>

    <!-- STEP 2: Scelta Cliente (NUOVO STEP) -->
    <div id="step2" class="step-content" style="display:none;">
        <h2>Seleziona Cliente</h2>
        <div style="margin-top:20px;">
            <input type="text" id="customerInput" placeholder="Cerca cliente..." autocomplete="off" />
            <ul id="customerResults" style="border:1px solid #ccc;padding:5px;max-height:200px;overflow:auto;display:none;"></ul>
        </div>
        <div style="margin-top:30px;">
            <table id="customerTable" class="table">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Cognome / Ragione Sociale</th>
                        <th>Email</th>
                        <th>Telefono</th>
                    </tr>
                </thead>
                <tbody id="customerTableBody">
                    <!-- i clienti verranno inseriti qui da JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- STEP 3: Scelta servizi -->
    <div id="step3" class="step-content" style="display:none;">
        <div id="servicesSection">
            <h2>Scegli i servizi per l'offerta:</h2>
            <div id="servicesList">Caricamento servizi...</div>
        </div>
    </div>

    <!-- STEP 4: Dati Economici -->
    <div id="step4" class="step-content" style="display:none;">
        <h2>Dati Economici Offerta</h2>
        <div class="economic-data-form">
            <div class="form-group">
                <label for="durataMesi">Durata (mesi):</label>
                <input type="number" id="durataMesi" placeholder="es. 36">
            </div>
            <div class="form-group">
                <label for="kmTotali">Km totali previsti:</label>
                <input type="number" id="kmTotali" placeholder="es. 60000">
            </div>
            <div class="form-group">
                <label for="anticipo">Anticipo (€):</label>
                <input type="number" id="anticipo" placeholder="es. 1000">
            </div>
            <div class="form-group">
                <label for="canone">Canone Mensile (€):</label>
                <input type="number" id="canone" placeholder="es. 350">
            </div>
        </div>
    </div>

    <!-- STEP 5: Riepilogo e Conferma -->
    <div id="step5" class="step-content" style="display:none;">
        <h2>Riepilogo Offerta</h2>
        <div id="riepilogoOfferta" class="summary-container">
            <!-- Riepilogo generato via JS -->
        </div>
        
    </div>
</div>

<!-- Bottoni navigazione STEP -->
<div class="navigation-buttons">
    <button id="backBtn" style="display:none;">← Indietro</button>
    <button id="nextStepBtn">Step 2 →</button>
    <button id="generatePdfBtn" style="display:none; margin-top:10px;">Ottieni PDF</button>
</div>

<button id="generatePdfBtn" style="display:none; margin-top:10px;">Ottieni PDF</button>
<div id="pdfLoader" style="display:none; margin-top:10px;">
    <span>Generazione PDF in corso...</span>
    <div class="loader"></div>
</div>



@section Scripts {

    <script>

        let adminInfo = null;
        let marcaDropdown, modelloDropdown, versioneDropdown, varianteDropdown, anteprimaAuto, loader, imagePlaceholder, carMainImageUrl, descrizioneVersione, noteAuto;
        let carImagesUrls = [];
        let customerInput, customerResults, selectedCustomer = {};
        let currentStep = 1, totalSteps = 5; // 👈 necessario
        let backBtn, nextStepBtn, generatePdfBtn; // 👈 necessario



        document.addEventListener("DOMContentLoaded", async () => {
            marcaDropdown = document.getElementById("marca");
            modelloDropdown = document.getElementById("modello");
            versioneDropdown = document.getElementById("versione");
            varianteDropdown = document.getElementById("variante");
            anteprimaAuto = document.getElementById("anteprimaAuto");
            loader = document.getElementById("loader");
            imagePlaceholder = document.getElementById("imagePlaceholder");
            descrizioneVersione = document.getElementById('descrizioneVersione');
            noteAuto = document.getElementById('noteAuto');
            customerInput = document.getElementById('customerInput');
            customerResults = document.getElementById('customerResults');

            adminInfo = await fetchAdminInfo();

            fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=it-azureautomotive`, marcaDropdown, "make");

            marcaDropdown.addEventListener("change", () => {
                modelloDropdown.innerHTML = '';
                versioneDropdown.innerHTML = '';
                varianteDropdown.innerHTML = '';
                anteprimaAuto.src = '';

                if (marcaDropdown.value) {
                    fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=it-azureautomotive&make=${marcaDropdown.value}`, modelloDropdown, "modelFamily");
                }
            });

            modelloDropdown.addEventListener("change", () => {
                versioneDropdown.innerHTML = '';
                varianteDropdown.innerHTML = '';
                anteprimaAuto.src = '';

                if (modelloDropdown.value) {
                    fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=it-azureautomotive&make=${marcaDropdown.value}&modelFamily=${modelloDropdown.value}`, versioneDropdown, "modelRange");
                }
            });

            versioneDropdown.addEventListener("change", () => {
                varianteDropdown.innerHTML = '';
                anteprimaAuto.src = '';

                if (versioneDropdown.value) {
                    fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=it-azureautomotive&make=${marcaDropdown.value}&modelFamily=${modelloDropdown.value}&modelRange=${versioneDropdown.value}`, varianteDropdown, "modelVariant");
                }
            });

            varianteDropdown.addEventListener("change", () => {
                loader.style.display = "block";
                anteprimaAuto.style.display = "none";
                imagePlaceholder.style.display = "none";

                if (varianteDropdown.value) {
                    const angles = [203, 29, 17, 9, 21, 13];
                    const colors = ["White", "Grey", "Red", "Yellow", "Azure"];

                    function getRandomColor() {
                        return colors[Math.floor(Math.random() * colors.length)];
                    }

                    carImagesUrls = angles.map(angle => {
                        const color = getRandomColor();
                        return {
                            url: `https://cdn.imagin.studio/getImage?customer=it-azureautomotive&make=${marcaDropdown.value}&modelFamily=${modelloDropdown.value}&modelRange=${versioneDropdown.value}&modelVariant=${varianteDropdown.value}&angle=${angle}&paintDescription=${color}&zoomType=FullScreen&groundPlaneAdjustment=0&fileType=png&width=800`,
                            color: color,
                            angle: angle
                        };
                    });

                    anteprimaAuto.src = carImagesUrls[0].url;

                    anteprimaAuto.onload = function () {
                        loader.style.display = "none";
                        anteprimaAuto.style.display = "block";
                        carMainImageUrl = carImagesUrls[0].url;
                    };

                    anteprimaAuto.onerror = function () {
                        loader.style.display = "none";
                        imagePlaceholder.textContent = "Anteprima non disponibile";
                        imagePlaceholder.style.display = "flex";
                    };
                } else {
                    loader.style.display = "none";
                    imagePlaceholder.textContent = "Seleziona una variante per visualizzare l'anteprima";
                    imagePlaceholder.style.display = "flex";
                }
            });

            // INIZIALIZZA backBtn e bottoni step
            backBtn = document.getElementById('backBtn');
            nextStepBtn = document.getElementById('nextStepBtn');
            generatePdfBtn = document.getElementById('generatePdfBtn');

                nextStepBtn.addEventListener('click', () => {
            if (currentStep < totalSteps) {
                document.getElementById(`step${currentStep}`).style.display = 'none';
                currentStep++;
                document.getElementById(`step${currentStep}`).style.display = 'block';

                // Nascondi bottone 'Avanti' al raggiungimento ultimo step
                nextStepBtn.style.display = (currentStep === totalSteps) ? 'none' : 'inline-block';
                nextStepBtn.textContent = currentStep < totalSteps ? `Step ${currentStep + 1} →` : '';

                backBtn.style.display = currentStep > 1 ? 'inline-block' : 'none';

                if (currentStep === totalSteps) {
                    generatePdfBtn.style.display = 'inline-block';
                    populateSummary();
                } else {
                    generatePdfBtn.style.display = 'none';
                }

                if (currentStep === 2) loadCustomersTable();
                if (currentStep === 3) loadServicesList();
            }
        });

                backBtn.addEventListener('click', () => {
            if (currentStep > 1) {
                // Nascondo step corrente
                document.getElementById(`step${currentStep}`).style.display = 'none';
                currentStep--;

                // Mostro step precedente
                document.getElementById(`step${currentStep}`).style.display = 'block';

                // Riporto visibilità bottoni allo stato corretto
                nextStepBtn.style.display = 'inline-block';
                nextStepBtn.textContent = `Step ${currentStep + 1} →`;
                generatePdfBtn.style.display = 'none';

                // Mostro il backBtn solo se non sono allo step 1
                backBtn.style.display = currentStep > 1 ? 'inline-block' : 'none';
            }
        });


        // Impostazione iniziale dei bottoni (da mettere nel DOMContentLoaded)
        document.addEventListener('DOMContentLoaded', () => {
            currentStep = 1; // 👈 assicurati che questa riga ci sia!
            backBtn.style.display = 'none';
            generatePdfBtn.style.display = 'none';
            nextStepBtn.textContent = 'Step 2 →';
        });

            backBtn.addEventListener('click', () => {
                if (currentStep > 1) {
                    document.getElementById(`step${currentStep}`).style.display = 'none';
                    currentStep--;
                    document.getElementById(`step${currentStep}`).style.display = 'block';
                    nextStepBtn.textContent = `Step ${currentStep + 1} →`;
                    backBtn.style.display = currentStep > 1 ? 'inline-block' : 'none';
                    generatePdfBtn.style.display = 'none';
                }
            });

        }); // chiusura DOMContentLoaded


    



        customerInput = document.getElementById('customerInput');
        customerResults = document.getElementById('customerResults');
        selectedCustomer = {};

        customerInput.addEventListener('input', function () {
            const query = customerInput.value.trim();

            if (query.length < 3) {
                customerResults.style.display = 'none';
                customerResults.innerHTML = '';
                return;
            }

            const token = new URLSearchParams(window.location.search).get('token');

            fetch('https://coreapi-production-ca29.up.railway.app/customers/clienti', {
                headers: {
                    "Authorization": "Bearer " + token
                }
            })
            .then(res => res.json())
            .then(clienti => {
                customerResults.innerHTML = '';

                const filteredCustomers = clienti.filter(cliente =>
                    (cliente.nome && cliente.nome.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.cognome && cliente.cognome.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.ragione_sociale && cliente.ragione_sociale.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.email && cliente.email.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.telefono && cliente.telefono.includes(query))
                );

                if (filteredCustomers.length === 0) {
                    customerResults.innerHTML = '<li>Nessun risultato trovato</li>';
                } else {
                    filteredCustomers.forEach(cliente => {
                        const li = document.createElement('li');
                        const nomeCompleto = [cliente.nome, cliente.cognome].filter(Boolean).join(' ') || cliente.ragione_sociale;

                        li.textContent = `${nomeCompleto} (${cliente.email})`;

                        li.addEventListener('click', function () {
                            customerInput.value = nomeCompleto;
                            customerResults.style.display = 'none';
                            selectedCustomer = cliente;
                            document.getElementById('nextStepBtn').style.display = 'inline-block';
                        });

                        customerResults.appendChild(li);
                    });
                }

                customerResults.style.display = 'block';
            })
            .catch(error => {
                console.error('Errore:', error);
                customerResults.innerHTML = '<li>Errore durante la ricerca.</li>';
                customerResults.style.display = 'block';
            });
        });

        // Recupera informazioni Admin
        async function fetchAdminInfo() {
            const token = new URLSearchParams(window.location.search).get('token');
            try {
                const res = await fetch('https://coreapi-production-ca29.up.railway.app/users/me', {
                    headers: { "Authorization": "Bearer " + token }
                });

                if (!res.ok) throw new Error('Errore caricamento dati Admin');

                const adminData = await res.json();

                return {
                    Id: adminData.id,
                    Email: adminData.email,
                    FirstName: adminData.nome,
                    LastName: adminData.cognome,
                    CompanyName: adminData.ragione_sociale,
                    VatNumber: adminData.partita_iva,
                    Address: adminData.indirizzo,
                    PostalCode: adminData.cap,
                    City: adminData.citta,
                    SDICode: adminData.codice_sdi,
                    MobilePhone: adminData.cellulare,
                    LogoUrl: adminData.logo_url
                };
            } catch(error){
                console.error(error);
                alert("Errore caricamento dati Admin.");
                return null;
            }
        }

        // Popola dropdown da API
        async function fetchDropdown(url, dropdown, keyName) {
            dropdown.innerHTML = '<option value="">Caricamento...</option>';
            dropdown.disabled = true;

            try {
                const response = await fetch(url);
                const data = await response.json();

                dropdown.innerHTML = `<option value="">Seleziona ${keyName}</option>`;

                let items = [];
                if (data.preselect && data.preselect.options && data.preselect.options[keyName]) {
                    items = data.preselect.options[keyName];
                } else if (data[keyName]) {
                    items = data[keyName];
                } else {
                    console.error("Struttura dati imprevista", data);
                    dropdown.innerHTML = `<option value="">Nessun dato disponibile</option>`;
                    return;
                }

                items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item;
                    option.textContent = item.toUpperCase();
                    dropdown.appendChild(option);
                });

                dropdown.disabled = false;
            } catch (error) {
                console.error('Errore nel recupero dati:', error);
                dropdown.innerHTML = `<option value="">Errore caricamento</option>`;
            }
        }

        //TABELLA CLIENTI
                async function loadCustomersTable() {
            const token = new URLSearchParams(window.location.search).get('token');
            const customerTableBody = document.getElementById('customerTableBody');

            customerTableBody.innerHTML = '<tr><td colspan="4">Caricamento clienti...</td></tr>';

            try {
                const response = await fetch('https://coreapi-production-ca29.up.railway.app/customers/clienti', {
                    headers: {
                        "Authorization": "Bearer " + token
                    }
                });

                const clienti = await response.json();

                customerTableBody.innerHTML = '';

                clienti.forEach(cliente => {
                    const tr = document.createElement('tr');

                    tr.innerHTML = `
                        <td>${cliente.nome || '-'}</td>
                        <td>${cliente.cognome || cliente.ragione_sociale || '-'}</td>
                        <td>${cliente.email || '-'}</td>
                        <td>${cliente.telefono || '-'}</td>
                    `;

                    tr.addEventListener('click', () => {
                        selectedCustomer = cliente;
                        customerInput.value = `${cliente.nome || ''} ${cliente.cognome || cliente.ragione_sociale || ''}`.trim();
                        customerResults.style.display = 'none';
                        document.getElementById('nextStepBtn').style.display = 'inline-block';
                    });

                    customerTableBody.appendChild(tr);
                });

            } catch (error) {
                console.error('Errore nel caricamento clienti:', error);
                customerTableBody.innerHTML = '<tr><td colspan="4">Errore nel caricamento clienti.</td></tr>';
            }
        }

        //TABELLA SERVIZI

        async function loadServicesList() {
            const token = new URLSearchParams(window.location.search).get('token');
            const servicesList = document.getElementById('servicesList');

            servicesList.innerHTML = 'Caricamento servizi...';

            try {
                const response = await fetch('https://coreapi-production-ca29.up.railway.app/nlt/services', {
                    headers: {
                        "Authorization": "Bearer " + token
                    }
                });

                if (!response.ok) throw new Error(`Errore HTTP: ${response.status}`);

                const data = await response.json();

                servicesList.innerHTML = '';

                data.services.forEach(service => {
                    const div = document.createElement('div');
                    div.classList.add('service-item');

                    const options = service.conditions?.options || [];

                    let optionsHtml = options.map((option, index) =>
                        `<label>
                            <input type="radio" name="option_${service.id}" value="${option}" ${index === 0 ? 'checked' : ''}>
                            ${option}
                        </label>`
                    ).join('');


                    div.innerHTML = `
                        <strong>${service.name}</strong><br>
                        <span>${service.description || 'Nessuna descrizione disponibile'}</span>
                        <div>${optionsHtml}</div>
                    `;

                    servicesList.appendChild(div);
                });

            } catch (error) {
                console.error('Errore caricamento servizi:', error);
                servicesList.innerHTML = 'Errore nel caricamento dei servizi.';
            }
        }

        //RIEPILOGO

                function populateSummary() {
            const riepilogoOfferta = document.getElementById('riepilogoOfferta');

            const selectedServices = Array.from(document.querySelectorAll('.service-item')).map(serviceItem => {
                const name = serviceItem.querySelector('strong').textContent;
                const option = serviceItem.querySelector('input[type="radio"]:checked')?.value || 'Nessuna';
                return { name, option };
            });

            riepilogoOfferta.innerHTML = `
            <table class="table summary-table">
                <tr><th colspan="2">Dati Auto</th></tr>
                <tr><td>Marca:</td><td>${marcaDropdown.value || '-'}</td></tr>
                <tr><td>Modello:</td><td>${modelloDropdown.value || '-'}</td></tr>
                <tr><td>Versione:</td><td>${versioneDropdown.value || '-'}</td></tr>
                <tr><td>Variante:</td><td>${varianteDropdown.value || '-'}</td></tr>
                <tr><td>Descrizione versione:</td><td>${descrizioneVersione.value || '-'}</td></tr>
                <tr><td>Note:</td><td>${noteAuto.value || '-'}</td></tr>

                <tr><th colspan="2">Dati Cliente</th></tr>
                <tr><td>Nome:</td><td>${selectedCustomer.nome || '-'}</td></tr>
                <tr><td>Cognome / Ragione Sociale:</td><td>${selectedCustomer.cognome || selectedCustomer.ragione_sociale || '-'}</td></tr>
                <tr><td>Email:</td><td>${selectedCustomer.email || '-'}</td></tr>
                <tr><td>Telefono:</td><td>${selectedCustomer.telefono || '-'}</td></tr>

                <tr><th colspan="2">Dati Economici</th></tr>
                <tr><td>Durata (mesi):</td><td>${document.getElementById('durataMesi').value || '-'}</td></tr>
                <tr><td>Km totali:</td><td>${document.getElementById('kmTotali').value || '-'}</td></tr>
                <tr><td>Anticipo (€):</td><td>${document.getElementById('anticipo').value || '-'}</td></tr>
                <tr><td>Canone Mensile (€):</td><td>${document.getElementById('canone').value || '-'}</td></tr>

                <tr><th colspan="2">Servizi Selezionati</th></tr>
                ${selectedServices.map(service => `
                    <tr><td>${service.name}</td><td>${service.option}</td></tr>
                `).join('')}
            </table>
            `;
        }


                document.addEventListener('click', function(event) {
            if (event.target && event.target.id === 'generatePdfBtn') {
                const token = new URLSearchParams(window.location.search).get("token");

                // Mostro il loader
                document.getElementById('pdfLoader').style.display = 'block';

                if (currentStep === totalSteps) {
                    const payload = {
                        CustomerFirstName: selectedCustomer.nome || "",
                        CustomerLastName: selectedCustomer.cognome || "",
                        CustomerCompanyName: selectedCustomer.ragione_sociale || "",
                        CustomerIcon: selectedCustomer.icon || "default.png",
                        CarImages: carImagesUrls,
                        CarMainImageUrl: carMainImageUrl,
                        Auto: {
                            Marca: marcaDropdown.value,
                            Modello: modelloDropdown.value,
                            Versione: versioneDropdown.value,
                            Variante: varianteDropdown.value,
                            DescrizioneVersione: descrizioneVersione.value,
                            Note: noteAuto.value
                        },
                        Servizi: Array.from(document.querySelectorAll('.service-item')).map(serviceItem => {
                            return {
                                Nome: serviceItem.querySelector('strong').textContent,

                                Opzione: serviceItem.querySelector('input[type="radio"]:checked')?.value || "Nessuna"
                            };
                        }),
                        DatiEconomici: {
                            Durata: parseInt(document.getElementById('durataMesi').value) || 0,
                            KmTotali: parseInt(document.getElementById('kmTotali').value) || 0,
                            Anticipo: parseFloat(document.getElementById('anticipo').value) || 0,
                            CanoneMensile: parseFloat(document.getElementById('canone').value) || 0
                        },
                        AdminInfo: adminInfo,
                        NoteAuto: noteAuto.value || ""
                    };

                    fetchPdf(payload, token);
                }
            }
        });

        // Nuova funzione per la fetch con gestione del loader
        async function fetchPdf(payload, token) {
            const loader = document.getElementById('loader');
            const pdfLoader = document.getElementById('pdfLoader');
            const generatePdfBtn = document.getElementById('generatePdfBtn');

            pdfLoading(true);

            try {
                const res = await fetch('/api/Pdf/GenerateOffer', {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer " + token
                    },
                    body: JSON.stringify(payload)
                });

                const blob = await res.blob();
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = getUniqueFileName();
                document.body.appendChild(a);
                a.click();
                URL.revokeObjectURL(url);
            } catch (error) {
                console.error("Errore generazione PDF:", error);
                alert('Errore durante la generazione del PDF.');
            } finally {
                document.getElementById('generatePdfBtn').style.display = 'inline-block';
                document.getElementById('pdfLoader').style.display = 'none';
            }
        }

        // Funzione per mostrare/nascondere loader
        function pdfLoading(show) {
            document.getElementById('pdfLoader').style.display = show ? 'block' : 'none';
            document.getElementById('generatePdfBtn').style.display = show ? 'none' : 'inline-block';
        }

        // Modifica della funzione fetchPdf per gestione loader
        async function fetchPdf(payload, token) {
            document.getElementById('generatePdfBtn').style.display = 'none';
            document.getElementById('pdfLoader').style.display = 'block';

            try {
                const response = await fetch('https://coreapi-production-ca29.up.railway.app/api/Pdf/GenerateOffer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(payload)
                });

                const blob = await response.blob();
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = getUniqueFileName();
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            } catch (error) {
                alert('Errore nella generazione del PDF.');
                console.error(error);
            } finally {
                document.getElementById('pdfLoader').style.display = 'none';
                document.getElementById('generatePdfBtn').style.display = 'inline-block';
            }
        }
        
        // Funzione esterna per nome file PDF
            function getUniqueFileName(){
            const now = new Date();
            const dateTimeString = now.getFullYear().toString() +
                ('0' + (now.getMonth() + 1)).slice(-2) +
                ('0' + now.getDate()).slice(-2) + '_' +
                ('0' + now.getHours()).slice(-2) +
                ('0' + now.getMinutes()).slice(-2) +
                ('0' + now.getSeconds()).slice(-2);

            return `NLT_Offer_${dateTimeString}.pdf`;
        }



    </script>
}
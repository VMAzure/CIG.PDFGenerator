@{
    ViewData["Title"] = "Crea Offerta PDF";
}
<link rel="stylesheet" href="~/css/offer.css" />
<hr />  

<div id="stepsContainer">
    <!-- STEP 1: Scelta auto e cliente -->
    <div id="step1" class="step-content active">
        <div class="car-selection-container">
            <div class="dropdowns">
                <select id="marca"></select>
                <select id="modello"></select>
                <select id="versione"></select>
                <select id="variante"></select>
            </div>
            <div class="car-preview">
                <img id="anteprimaAuto" src="" alt="Anteprima Auto">
                <div id="imagePlaceholder">Seleziona una variante per visualizzare l'anteprima</div>
                <div id="loader" style="display:none;" class="loader"></div>
            </div>
        </div>

        <div style="margin-top:20px;">
            <input type="text" id="customerInput" placeholder="Cerca cliente..." autocomplete="off" />
            <ul id="customerResults" style="border:1px solid #ccc;padding:5px;max-height:200px;overflow:auto;display:none;"></ul>
        </div>
    </div>

    <!-- STEP 2: Scelta servizi -->
    <div id="step2" class="step-content" style="display:none;">
        <div id="servicesSection">
            <h2>Scegli i servizi per l'offerta:</h2>
            <div id="servicesList">Caricamento servizi...</div>
        </div>
    </div>

    <!-- STEP 3: Dati Economici -->
    <div id="step3" class="step-content" style="display:none;">
        <h2>Dati Economici Offerta</h2>

        <div class="economic-data-form">
            <div class="form-group">
                <label for="durataMesi">Durata (mesi):</label>
                <input type="number" id="durataMesi" placeholder="es. 36">
            </div>

            <div class="form-group">
                <label for="kmTotali">Km totali previsti:</label>
                <input type="number" id="kmTotali" placeholder="es. 60000">
            </div>

            <div class="form-group">
                <label for="anticipo">Anticipo (€):</label>
                <input type="number" id="anticipo" placeholder="es. 1000">
            </div>

            <div class="form-group">
                <label for="canone">Canone Mensile (€):</label>
                <input type="number" id="canone" placeholder="es. 350">
            </div>
        </div>
    </div>



    <!-- STEP 4: Riepilogo e Conferma -->
    <div id="step4" class="step-content" style="display:none;">
        <h2>Riepilogo Offerta</h2>

        <div id="riepilogoOfferta" class="summary-container">
            <!-- Riepilogo generato via JS -->
        </div>
        <button id="generatePdfBtn" style="margin-top:20px;">📄 Genera PDF</button>
    </div>
  
</div>

<!-- Bottoni navigazione STEP -->
<div class="navigation-buttons">
    <button id="backBtn" style="display:none;">← Indietro</button>
    <button id="nextStepBtn">Step 2 →</button>
</div>




@section Scripts {
    <script>

        let adminInfo = null;
        document.addEventListener("DOMContentLoaded", async () => {
            adminInfo = await fetchAdminInfo();
                    
        async function fetchAdminInfo() {
            const token = new URLSearchParams(window.location.search).get('token');

            try {
                const res = await fetch('https://coreapi-production-ca29.up.railway.app/users/me', {
                    headers: { "Authorization": "Bearer " + token }
                });

                if (!res.ok) throw new Error('Errore caricamento dati Admin');

                const adminData = await res.json();

                return {
                    Id: adminData.id,
                    Email: adminData.email,
                    FirstName: adminData.nome,
                    LastName: adminData.cognome,
                    CompanyName: adminData.ragione_sociale,
                    VatNumber: adminData.partita_iva,
                    Address: adminData.indirizzo,
                    PostalCode: adminData.cap,
                    City: adminData.citta,
                    SDICode: adminData.codice_sdi,
                    MobilePhone: adminData.cellulare,
                    LogoUrl: adminData.logo_url
                };
            } catch(error){
                console.error(error);
                alert("Errore caricamento dati Admin.");
                return null;
            }
        }

        filteredCustomers.forEach(cliente => {
            const li = document.createElement('li'); //✅ Definizione elemento li chiaramente prima dell'uso
            const nomeCompleto = [cliente.nome, cliente.cognome].filter(Boolean).join(' ') || cliente.ragione_sociale;

            li.textContent = nomeCompleto + ' (' + cliente.email + ')';

            // ✅ Ora l'addEventListener è applicato correttamente a "li"
            li.addEventListener('click', function () {
                customerInput.value = nomeCompleto;
                customerResults.style.display = 'none';
                selectedCustomer = cliente;
                document.getElementById('nextStepBtn').style.display = 'inline-block';
            });

            customerResults.appendChild(li);
        });


        });

    
    </script>
    <script>
        const customerKey = "it-azureautomotive";
        const marcaDropdown = document.getElementById("marca");
        const modelloDropdown = document.getElementById("modello");
        const versioneDropdown = document.getElementById("versione");
        const varianteDropdown = document.getElementById("variante");
        const anteprimaAuto = document.getElementById("anteprimaAuto");

        // Funzione generica per popolare dropdown
        async function fetchDropdown(url, dropdown, keyName) {
            dropdown.innerHTML = '<option value="">Caricamento...</option>';
            dropdown.disabled = true;

            try {
                const response = await fetch(url);
                const data = await response.json();

                dropdown.innerHTML = `<option value="">Seleziona ${keyName}</option>`;
                data.preselect.options[keyName].forEach(item => {
                    const option = document.createElement('option');
                    option.value = item;
                    option.textContent = item.toUpperCase();
                    dropdown.appendChild(option);
                });

                dropdown.disabled = false;
            } catch (error) {
                console.error('Errore nel recupero dati:', error);
                dropdown.innerHTML = `<option value="">Errore caricamento</option>`;
            }
        }

        // Carica marche al caricamento della pagina
        document.addEventListener("DOMContentLoaded", () => {
            fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=${customerKey}`, marcaDropdown, "make");
        });

        // Eventi collegati per caricare modelli, versioni e varianti
        marcaDropdown.addEventListener("change", () => {
            modelloDropdown.innerHTML = '';
            versioneDropdown.innerHTML = '';
            varianteDropdown.innerHTML = '';
            anteprimaAuto.src = '';

            if (marcaDropdown.value) {
                fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=${customerKey}&make=${marcaDropdown.value}`, modelloDropdown, "modelFamily");
            }
        });

        modelloDropdown.addEventListener("change", () => {
            versioneDropdown.innerHTML = '';
            varianteDropdown.innerHTML = '';
            anteprimaAuto.src = '';

            if (modelloDropdown.value) {
                fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=${customerKey}&make=${marcaDropdown.value}&modelFamily=${modelloDropdown.value}`, versioneDropdown, "modelRange");
            }
        });

        versioneDropdown.addEventListener("change", () => {
            varianteDropdown.innerHTML = '';
            anteprimaAuto.src = '';

            if (versioneDropdown.value) {
                fetchDropdown(`https://cdn.imagin.studio/getCarListing?customer=${customerKey}&make=${marcaDropdown.value}&modelFamily=${modelloDropdown.value}&modelRange=${versioneDropdown.value}`, varianteDropdown, "modelVariant");
            }
        });

        // Mostra anteprima immagine auto quando selezioni la variante
        // Quando selezioni la variante finale:
            varianteDropdown.addEventListener("change", () => {
            const loader = document.getElementById("loader");
            loader.style.display = "block";
            anteprimaAuto.style.display = "none";
            imagePlaceholder.style.display = "none";

            if (varianteDropdown.value) {
                const imageUrl = `https://cdn.imagin.studio/getImage?customer=${customerKey}&make=${marcaDropdown.value}&modelFamily=${modelloDropdown.value}&modelRange=${versioneDropdown.value}&modelVariant=${varianteDropdown.value}&angle=203&zoomType=Adaptive&groundPlaneAdjustment=0&fileType=png&width=800`;

                anteprimaAuto.src = imageUrl;
                anteprimaAuto.onload = function(){
                    loader.style.display = "none";
                    anteprimaAuto.style.display = "block";
                        carMainImageUrl = imageUrl; //🔴 Salva subito qui
                };
                anteprimaAuto.onerror = function(){
                    loader.style.display = "none";
                    imagePlaceholder.textContent = "Anteprima non disponibile";
                    imagePlaceholder.style.display = "flex";
                };
            } else {
                loader.style.display = "none";
                imagePlaceholder.textContent = "Seleziona una variante per visualizzare l'anteprima";
                imagePlaceholder.style.display = "flex";
            }
        });


    </script>

    <script>
        const customerInput = document.getElementById('customerInput');
        const customerResults = document.getElementById('customerResults');

        // variabile globale chiaramente definita
        let selectedCustomer = {};

        const urlParams = new URLSearchParams(window.location.search);
        const token = urlParams.get('token');

        customerInput.addEventListener('input', function () {
            const query = customerInput.value.trim();

            if (query.length < 3) {
                customerResults.style.display = 'none';
                return;
            }

            fetch('https://coreapi-production-ca29.up.railway.app/customers/clienti', {
                headers: {
                    "Authorization": "Bearer " + token
                }
            })
            .then(res => res.json())
            .then(clienti => {
                customerResults.innerHTML = '';

                const filteredCustomers = clienti.filter(cliente =>
                    (cliente.nome && cliente.nome.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.cognome && cliente.cognome.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.ragione_sociale && cliente.ragione_sociale.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.email && cliente.email.toLowerCase().includes(query.toLowerCase())) ||
                    (cliente.telefono && cliente.telefono.includes(query))
                );

                filteredCustomers.forEach(cliente => {
                    const li = document.createElement('li');  //✅ li definito chiaramente qui
                    const nomeCompleto = [cliente.nome, cliente.cognome].filter(Boolean).join(' ') || cliente.ragione_sociale;

                    li.textContent = nomeCompleto + ' (' + cliente.email + ')';
                    li.addEventListener('click', function () {
                        customerInput.value = nomeCompleto;
                        customerResults.style.display = 'none';

                        selectedCustomer = cliente; // ✅ salvo cliente

                        document.getElementById('nextStepBtn').style.display = 'inline-block';
                    });
                    customerResults.appendChild(li);
                });

                customerResults.style.display = 'block';
            })
            .catch(error => {
                console.error('Errore:', error);
            });
        });
    </script>


<script>
        let currentStep = 1;
        const totalSteps = 4;

        document.getElementById('nextStepBtn').addEventListener('click', () => {
            if (currentStep < totalSteps) goToStep(currentStep + 1);
        });

        document.getElementById('backBtn').addEventListener('click', () => {
            if (currentStep > 1) goToStep(currentStep - 1);
        });

            function goToStep(stepNumber) {
            const current = document.getElementById(`step${currentStep}`);
            current.classList.remove('active');
            current.classList.add('exit-left');

            setTimeout(() => {
                current.style.display = 'none';
                current.classList.remove('exit-left');

                const next = document.getElementById(`step${stepNumber}`);
                next.style.display = 'block';
                setTimeout(() => next.classList.add('active'), 10);

                currentStep = stepNumber;

               // Gestione pulsanti navigazione
                document.getElementById('backBtn').style.display = currentStep > 1 ? 'inline-block' : 'none';
                document.getElementById('nextStepBtn').textContent = currentStep < 4 ? `Step ${currentStep + 1} →` : '📄 Genera PDF';

                if (currentStep === 4) {
                    generaRiepilogo();
                    document.getElementById('nextStepBtn').style.display = 'none';
                } else {
                    document.getElementById('nextStepBtn').style.display = 'inline-block';
                }

                // ✅ Carica servizi SOLO quando entri nello STEP 2
                if (currentStep === 2) {
                    caricaServizi();
                }

            }, 300);
        }



        function caricaServizi() {
            const token = new URLSearchParams(window.location.search).get("token");
            const servicesList = document.getElementById('servicesList');
            servicesList.innerHTML = 'Caricamento servizi...';

            fetch('https://coreapi-production-ca29.up.railway.app/nlt/services', {
                headers: {
                    "Authorization": "Bearer " + token
                }
            })
            .then(res => res.json())
            .then(data => {
                servicesList.innerHTML = '';

                data.services.forEach(service => {
                    const div = document.createElement('div');
                    div.className = 'service-item';

                    let html = `
                        <label>
                            <input type="checkbox" value="${service.id}">
                            <strong>${service.name}</strong><br>
                            <small>${service.description}</small>
                        </label>
                    `;

                    if (service.conditions && service.conditions.options) {
                        let htmlOptions = '<div class="service-options">';
                        service.conditions.options.forEach(option => {
                            htmlOptions += `
                                <label style="margin-right:10px;">
                                    <input type="radio" name="option_${service.id}" value="${option}"> ${option}
                                </label>
                            `;
                        });
                        htmlOptions += '</div>';
                        html += htmlOptions;
                    }

                    div.innerHTML = html;
                    servicesList.appendChild(div);
                });
            })
            .catch(error => {
                servicesList.textContent = 'Errore caricamento servizi.';
                console.error('Errore:', error);
            });
        }

        function generaRiepilogo() {
            const riepilogo = document.getElementById('riepilogoOfferta');

            // Recupera dati selezionati
            const auto = {
                marca: marcaDropdown.value,
                modello: modelloDropdown.value,
                versione: versioneDropdown.value,
                variante: varianteDropdown.value
            };

            const cliente = document.getElementById('customerInput').value;

            // Servizi selezionati
            const serviziSelezionati = [];
            document.querySelectorAll('#servicesList input[type="checkbox"]:checked').forEach(checkbox => {
                const servizio = checkbox.nextElementSibling.textContent;
                const opzione = document.querySelector(`input[name="option_${checkbox.value}"]:checked`)?.value || 'Nessuna opzione';
                serviziSelezionati.push(`${servizio} (${opzione})`);
            });

            // Dati economici
            const durata = document.getElementById('durataMesi').value;
            const km = document.getElementById('kmTotali').value;
            const anticipo = document.getElementById('anticipo').value;
            const canone = document.getElementById('canone').value;

            riepilogo.innerHTML = `
                <h4>🚗 Auto selezionata</h4>
                <p>${auto.marca} ${auto.modello} ${auto.versione} ${auto.variante}</p>

                <h4>👤 Cliente</h4>
                <p>${cliente}</p>

                <h4>🛠️ Servizi selezionati</h4>
                <ul>${serviziSelezionati.map(s => `<li>${s}</li>`).join('')}</ul>

                <h4>💶 Dati economici</h4>
                <ul>
                    <li>Durata: ${durata} mesi</li>
                    <li>Km previsti: ${km}</li>
                    <li>Anticipo: € ${anticipo}</li>
                    <li>Canone: € ${canone}</li>
                </ul>
            `;
        }

        document.getElementById('generatePdfBtn').addEventListener('click', () => {
            const token = new URLSearchParams(window.location.search).get("token");

                    const payload = {
            CustomerFirstName: selectedCustomer.nome || "",
            CustomerLastName: selectedCustomer.cognome || "",
            CustomerCompanyName: selectedCustomer.ragione_sociale || "",
            CustomerIcon: "icona_default.png", // da scegliere dalla gallery
            CarMainImageUrl: carMainImageUrl,
            CarThumbnailUrl: carMainImageUrl, // stessa immagine per semplicità
            AdminInfo: adminInfo, // 🔴 usa questa variabile già caricata (verifica nome corretto!)
            DealerInfo: null, // ora impostalo a null, poi lo vediamo
            Auto: {
                Marca: marcaDropdown.value,
                Modello: modelloDropdown.value,
                Versione: versioneDropdown.value,
                Variante: varianteDropdown.value
            },
            Servizi: Array.from(document.querySelectorAll('#servicesList input[type="checkbox"]:checked')).map(checkbox => ({
                Id: checkbox.value,
                Opzione: document.querySelector(`input[name="option_${checkbox.value}"]:checked`)?.value || null
            })),
            DatiEconomici: {
                Durata: parseInt(document.getElementById('durataMesi').value),
                KmTotali: parseInt(document.getElementById('kmTotali').value),
                Anticipo: parseFloat(document.getElementById('anticipo').value),
                Canone: parseFloat(document.getElementById('canone').value)
            }
        };


    
            fetch('/api/Pdf/GenerateOffer', {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + token
                },
                body: JSON.stringify(payload)
            })
            .then(res => {
                if (!res.ok) throw new Error("Errore generazione PDF");
                return res.blob();
            })
            .then(blob => {
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'Offerta.pdf';
                document.body.appendChild(a);
                a.click();
                a.remove();
            })
            .catch(error => {
                console.error("Errore generazione PDF:", error);
                alert("Errore durante la generazione del PDF. Verifica i dati inseriti.");
            });
        });


</script>
}
